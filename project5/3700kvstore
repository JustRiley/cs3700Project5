#!/usr/bin/env python

import sys, socket, select, time, json, random
from random import randint
from collections import OrderedDict

class Server:
	term = 1
	state = 'follower'
	# Your ID number
	id = sys.argv[1]
	# The ID numbers of all the other replicas
	replica_ids = sys.argv[2:]
	leader_id = None
	last_received_rpc = time.time()
	# timeout length for this server (between 150 and 300 ms)
	timeout_length = randint(150, 300)
	# who we voted for, map of term to who we voted for
	voted_for = {}
	# number of votes we received
	election_votes = 1
	# as leader, last time we sent an rpc time
	last_sent_rpc = time.time()
	# timeout length as leader
	rpc_timeout_length = 100
	# our transaction log mapping MID to array [key, value, dst, term]
	transaction_log = OrderedDict()
	# our key value store of committed transactions
	kv_store = OrderedDict()
	# dict mapping MID to array of unique votes
	transaction_votes = {}
	# dict mapping MID to last sent time
	transaction_timeout = {}
	# dict mapping MID to term that it was added
	transaction_term = {}
	# the term of our latest commit
	commit_index = -1
	# current log index
	current_log_index = -1
	# current log term
	current_log_term = 1
	# map of replica id to nextindex for that replica
	next_index_map = {}
	buffered_packets = []
	# for debugging purposes
	message_count = 0
	active_replica_ids = {}
	
	sock = socket.socket(socket.AF_UNIX, socket.SOCK_SEQPACKET)
        sock.connect(id)
	
	#enter election period
	def election(self):
		print "{0} becomes a candidate".format(self.id)
		self.term += 1
		self.state = 'candidate'
		self.election_votes = 1
		msg = {'src': self.id, 'dst': 'FFFF', 'term': self.term, 'log_term': self.current_log_term, 'log_index': self.current_log_index, 'leader': 'FFFF', 'type': 'requestvote_rpc'}
		self.send_rpc(msg)
		self.last_received_rpc = time.time()

	# enter election if we have hit our timeout
	def check_for_timeout(self):
		clock = time.time()
		time_diff = (clock - self.last_received_rpc) * 1000
		if time_diff > self.timeout_length:
			self.election()			

	# resend rpc if we hit our timeout
	def check_for_rpc_timeout(self):
		clock = time.time()
		if (clock - self.last_sent_rpc) * 1000 > self.rpc_timeout_length:
			msg = {'src': self.id, 'dst': 'FFFF', 'leader': self.id, 'type': 'leader_rpc', 'term': self.term, 'blank': True}
			#self.message_count += 5
			#print "multicast b/c rpc timeout total:{0}".format(self.message_count)
			self.send_rpc(msg)
			self.last_sent_rpc = time.time()

	# resend appenentries_rpc if any transaction has timed out
	def check_for_transaction_timeout(self):
		clock = time.time()
		for k in self.transaction_timeout.keys():
			# resend appendentries rpc if we hit timeout. Reset time in our transaction_timeout dict
			if (clock - self.transaction_timeout[k]) * 1000 > self.rpc_timeout_length:
				#print "resent transaction msg"
				msg = {'src': self.id, 'dst': 'FFFF', 'leader': self.leader_id, 'term': self.term, 'type': 'leader_rpc', 'key': self.transaction_log[k][0], 'value': self.transaction_log[k][1], 'blank': False, 'commit': False, 'MID': k, 'leader_commit': self.commit_index, 'recipient': self.transaction_log[k][2]}
				self.resend_append_rpc(msg)
				self.transaction_timeout[k] = time.time()

	# set all of the indexes for our replicas in our next_index_map
	def set_replica_indexes(self):
		self.next_index_map = {}
		for id in self.replica_ids:
			self.next_index_map[id] = len(self.transaction_log.keys()) - 1
			self.active_replica_ids[id] = 0

	# send rpc to all of our replicas
	def send_rpc(self, msg):
		# reset our last sent rpc time
                self.last_sent_rpc = time.time()
		for id in self.replica_ids:
			msg['dst'] = id
                        self.sock.send(json.dumps(msg))

	# send append_entry rpc
	def send_append_rpc(self, msg):
		# reset our last sent rpc time
                self.last_sent_rpc = time.time()
                for id in self.active_replica_ids.keys():
                	prev_log_index = self.next_index_map[id]
                        #print prev_log_index
                        msg['prev_log_index'] = prev_log_index
                        # take into account first message
                        if prev_log_index == -1:
                               msg['prev_log_term'] = self.term
                        else:
			       #print "prev log index {0} with trasaction log size {1}".format(prev_log_index, len(self.transaction_log.keys()))
                               # send term at prev log index
                               key_at_index = self.transaction_log.keys()[prev_log_index]
                               msg['prev_log_term'] = self.transaction_log[key_at_index][3]
                               # send key and value of NEXT index
                               #next_key_at_index = self.transaction_log.keys()[prev_log_index + 1]
                               #msg['key'] = self.transaction_log[next_key_at_index][0]
                               #msg['value'] = self.transaction_log[next_key_at_index][1]
                        msg['dst'] = id
                        self.sock.send(json.dumps(msg))

	# resend append_entry rpc to replicas that havent voted yet
	def resend_append_rpc(self, msg):
		# reset our last sent rpc time
                self.last_sent_rpc = time.time()
		#print self.transaction_timeout
		#print self.transaction_votes
                for id in self.active_replica_ids.keys():
			self.active_replica_ids[id] += 1
			if self.active_replica_ids[id] < 10:
				if id not in self.transaction_votes[msg['MID']]:
                			prev_log_index = self.next_index_map[id]
                        		#print prev_log_index
                        		msg['prev_log_index'] = prev_log_index
                        		# take into account first message
                        		if prev_log_index == -1:
                                		msg['prev_log_term'] = self.term
                        		else:
			       			#print "prev log index {0} with trasaction log size {1}".format(prev_log_index, len(self.transaction_log.keys()))
						# send term at prev log index
                               			key_at_index = self.transaction_log.keys()[prev_log_index]
                               			msg['prev_log_term'] = self.transaction_log[key_at_index][3]
                               			# send key and value of NEXT index
                               			#next_key_at_index = self.transaction_log.keys()[prev_log_index + 1]
                               			#msg['key'] = self.transaction_log[next_key_at_index][0]
                               			#msg['value'] = self.transaction_log[next_key_at_index][1]
                        		msg['dst'] = id
					self.message_count += 1
					#print "{0} resending appendrpc to {2} total: {1}".format(self.id, self.message_count, id)
                        		self.sock.send(json.dumps(msg))

	# commit all transactions up to index
	def append_commits(self, commit_index):
		# if incoming commit index is greater than ours, then append commits up to index
		if commit_index > self.commit_index:
			while self.commit_index < commit_index:
				self.commit_index += 1
				key_at_index = self.transaction_log.keys()[self.commit_index]
				# append entry to our kv_store
				self.kv_store[self.transaction_log[key_at_index][0]] = self.transaction_log[key_at_index][1]

	# send redirect response to client for buffered packets
	def redirect_buffered_packets(self):
		for packet in self.buffered_packets:
			packet['leader'] = self.leader_id
			self.sock.send(json.dumps(packet))

	# process buffered packets if we became leader
	def process_buffered_packets(self):
		for packet in self.buffered_packets:
			if packet['type'] == 'get':
				# if requested key is in our key value store, return the value
                                if msg['key'] in self.kv_store.keys():
                                	response = {'src': self.id, 'dst': packet['dst'], 'leader': self.leader_id, 'type': 'ok', 'MID': packet['MID'], 'value': self.kv_store[packet['key']]}
                                        self.sock.send(json.dumps(response))
                                # send blank message if key ws never put in our key value store
                                else:
                   	        	response = {'src': self.id, 'dst': packet['dst'], 'leader': self.leader_id, 'type': 'ok', 'MID': packet['MID'], 'value': ''}
                                	self.sock.send(json.dumps(response))
			elif packet['type'] == 'put':
				response = {'src': self.id, 'dst': 'FFFF', 'leader': self.leader_id, 'term': self.term, 'type': 'leader_rpc', 'key': packet['key'],
						'value': packet['value'], 'blank': False, 'prev_log_index': self.current_log_index, 'prev_log_term': self.current_log_term,
				 		'leader_commit': self.commit_index, 'MID': packet['MID'], 'recipient': packet['recipient']}
				self.sock.send(json.dumps(response))

	def receive(self):
		while True:
			if self.state == 'leader':
				self.check_for_transaction_timeout()
				self.check_for_rpc_timeout()
			else:
				self.check_for_timeout()
			ready = select.select([self.sock], [], [], 0.01)[0]
	
			if self.sock in ready:
				msg_raw = self.sock.recv(32768)
		
				if len(msg_raw) == 0: continue
				msg = json.loads(msg_raw)
		
				# If we receive get or put, make sure the dst is our id
				if msg['type'] in ['get', 'put'] and msg['dst'] == self.id:
					# if I am follower, want to redirect message
					if self.state == 'follower':		
						# check to make sure we know who the leader is
						if self.leader_id:
							msg = {'src': self.id, 'dst': msg['src'], 'leader': self.leader_id, 'type': 'redirect', 'MID': msg['MID']}
							self.sock.send(json.dumps(msg))
						else:
							msg = {'src': self.id, 'dst': msg['src'], 'leader': 'FFFF', 'type': 'redirect', 'MID': msg['MID']}
                                                        self.sock.send(json.dumps(msg))
					# If i am a leader, commit transaction and send rpc to followers
					elif self.state == 'leader':
						# If msg is a get, return value to client
						if msg['type'] == 'get':
							#print "leader received a get {0}".format(msg)
							# if requested key is in our key value store, return the value
							if msg['key'] in self.kv_store.keys():
								msg = {'src': self.id, 'dst': msg['src'], 'leader': self.leader_id, 'type': 'ok', 'MID': msg['MID'], 'value': self.kv_store[msg['key']]}
								#self.message_count += 1
								#print "leader send get to client {0}".format(self.message_count)
								self.sock.send(json.dumps(msg))
							# send blank message if key ws never put in our key value store
							else:
								msg = {'src': self.id, 'dst': msg['src'], 'leader': self.leader_id, 'type': 'ok', 'MID': msg['MID'], 'value': ''}
                                                                self.sock.send(json.dumps(msg))
						# if msg is a put, enter entry into our transaction log and send rpc appendentries to replicas
						elif msg['type'] == 'put':
							#print "leader received a put {0}".format(msg)
							response = {'src': self.id, 'dst': 'FFFF', 'leader': self.leader_id, 'term': self.term, 'type': 'leader_rpc', 
									'key': msg['key'], 'value': msg['value'], 'blank': False, 'prev_log_index': self.current_log_index, 
									'prev_log_term': self.current_log_term, 'leader_commit': self.commit_index, 'MID': msg['MID'], 'recipient': msg['src']}
							self.transaction_log[msg['MID']] = [msg['key'], msg['value'], msg['src'], self.term]
							self.transaction_votes[msg['MID']] = [self.id]
							self.transaction_timeout[msg['MID']] = time.time()
							#print "multicast b/c put from client total: {0}".format(self.message_count)
							#self.message_count += 5
							#self.send_append_rpc(response)
							self.current_log_index += 1
							self.current_log_term = self.term
							#print "sent put leader rpc"

					# if we are a candidate, buffer packet
					elif self.state == 'candidate':
						#print "candidate {0} sent a fail".format(self.id)
						if msg['type'] == 'get':
							response = {'src': self.id, 'dst': msg['src'], 'leader': 'FFFF', 'type': 'redirect', 'MID': msg['MID'], 'key': msg['key']}
							self.buffered_packets.append(response)
						elif msg['type'] == 'put':
							response = {'src': self.id, 'dst': msg['src'], 'leader': 'FFFF', 'type': 'redirect', 'MID': msg['MID'], 'key': msg['key'],
									'value': msg['value'], 'recipient': msg['src']}
							self.buffered_packets.append(response)

				# Handle noop messages. This may be removed from your final implementation
				elif msg['type'] == 'leader_rpc':
					#print "{0} received a leader_rpc {1}".format(self.id, msg)
					# reset our last received rpc time
					self.last_received_rpc = time.time()
					# revert to follower if we are candidate and we receive a leader rpc (leader comes back up)
                                        # make sure leader rpc we receive is at least our term
                                        if self.state == 'candidate' and msg['term'] >= self.term:
                                                self.state = 'follower'
                                                self.election_votes = 1
						self.leader_id = msg['leader']
						self.term = msg['term']
						# send redirect to new leader for our buffered packets
						self.redirect_buffered_packets()
						# clear our buffered packets
						self.buffered_packets = []
                                                print "{0} candidate reverted to follower and set leader_id to {1}".format(self.id, self.leader_id)
					elif self.state == 'follower' and self.leader_id != msg['leader'] and self.term <= msg['term']:
						self.leader_id = msg['leader']
						self.term = msg['term']
						print "{0} set leader_id to {1}".format(self.id, self.leader_id)
					# set term to leader's term if ours is lower
					elif self.state == 'leader' and self.term < msg['term']:
						self.term = msg['term']
						self.state = 'follower'
						self.election_votes = 1
						self.leader_id = msg['leader']
						print "{0} reverted back to follower from leader and set leader_id to {1}".format(self.id, self.leader_id)
					# if we receive appendentries rpc, add to our transaction log and send confirmation to leader
					if self.state == 'follower' and not msg['blank']:
						# reply false if leader term is less than our term
						if msg['term'] < self.term:
							response =  {'src': self.id, 'dst': self.leader_id, 'term': self.term, 'leader': self.leader_id, 'type': 'ack_rpc', 'key': msg['key'], 'value': msg['value'], 'MID': msg['MID'], 'success': False}
							self.sock.send(json.dumps(response))
						# accept blindly if our transaction log is empty
						#elif len(self.transaction_log.keys()) == 0:
						# trying different initial check
						elif self.current_log_index == -1:
							#print "hit initial block {0}".format(msg)
							response =  {'src': self.id, 'dst': self.leader_id, 'term': self.term, 'leader': self.leader_id, 'type': 'ack_rpc', 'key': msg['key'], 'value': msg['value'], 'MID': msg['MID'], 'success': True}
                                                        self.transaction_log[msg['MID']] = [msg['key'], msg['value'], msg['recipient'], self.term]
                                                        self.current_log_index += 1
                                                        self.current_log_term = self.term
							self.sock.send(json.dumps(response))
							new_commit_index = min(msg['leader_commit'], msg['prev_log_index'])
                                                	self.append_commits(new_commit_index)	
							
						# reply false if our log doesnt contain same entry or term
						#TODO this is dumb
						elif msg['prev_log_index'] <= len(self.transaction_log.keys()) - 1:
							#if self.transaction_log.keys().index(msg['MID']) != msg['prev_log_index']:
							#	print "sent fail message 2"
							#	response =  {'src': self.id, 'dst': self.leader_id, 'term': self.term, 'leader': self.leader_id, 'type': 'ack_rpc', 'key': msg['key'], 'value': msg['value'], 'MID': msg['MID'], 'success': False}
							key_at_index = self.transaction_log.keys()[msg['prev_log_index']]
							if self.transaction_log[key_at_index][3] != msg['prev_log_term']:
								self.current_log_index = msg['prev_log_index'] - 1
								# only change current log term if our log index isnt at beginning
								if self.current_log_index > -1:
									self.current_log_term = self.transaction_log.keys()[self.current_log_index][3]
								# delete all entries after index
								delete_index = self.transaction_log.keys().index(key_at_index)
								self.transaction_log.items()[:delete_index]
								response =  {'src': self.id, 'dst': self.leader_id, 'term': self.term, 'leader': self.leader_id, 'type': 'ack_rpc', 'key': msg['key'], 'value': msg['value'], 'MID': msg['MID'], 'success': False}
                                                        
							else:
								
								#print "sent success for {0}".format(msg['prev_log_index'])
								response =  {'src': self.id, 'dst': self.leader_id, 'term': self.term, 'leader': self.leader_id, 'type': 'ack_rpc', 'key': msg['key'], 'value': msg['value'], 'MID': msg['MID'], 'success': True}
								self.transaction_log[msg['MID']] = [msg['key'], msg['value'], msg['recipient'], self.term]
								#print "after insert, transaction log length is now {0}".format(len(self.transaction_log.keys()))
								self.current_log_index += 1
								self.current_log_term = self.term
								new_commit_index = min(msg['leader_commit'], msg['prev_log_index'])
                                                		self.append_commits(new_commit_index)

							#self.message_count += 1
							#print "{1} sent ack to leader total: {0}".format(self.message_count, self.id)
							self.sock.send(json.dumps(response))
						else:
							#print "sent fail message 5 msg: {0}".format(msg)
							#print "prev log index at {0} with our transaction log -1 at {1}".format(msg['prev_log_index'], len(self.transaction_log.keys()) - 1) 
							response =  {'src': self.id, 'dst': self.leader_id, 'term': self.term, 'leader': self.leader_id, 'type': 'ack_rpc', 'key': msg['key'], 'value': msg['value'], 'MID': msg['MID'], 'success': False}
							#self.message_count += 1
							#print"send ack to leader total: {0}".format(self.message_count)
							self.sock.send(json.dumps(response))


				# received a request for a vote rpc
				elif msg['type'] == 'requestvote_rpc':
					print "{0} received a vote request state: {1}".format(self.id, self.state)
					if self.state == 'follower':
					# make sure we are a follower and we haven't yet voted in this term
						if msg['term'] not in self.voted_for.keys():
							# if our commit term is lower, then vote
							if self.current_log_term < msg['log_term']:
								print "{0} voted for {1}".format(self.id, msg['src'])
								response = {'src': self.id, 'dst': msg['src'], 'leader': 'FFFF', 'type': 'vote_rpc'}
								self.sock.send(json.dumps(response))
								# reset our last received rpc time
								self.last_received_rpc = time.time()
								self.voted_for[msg['term']]  = msg['src']
								self.leader_id = None
						# if commit terms same, compare log index
							elif self.current_log_term == msg['log_term'] and self.current_log_index <= msg['log_index']:
								print "{0} voted for {1}".format(self.id, msg['src'])
								response = {'src': self.id, 'dst': msg['src'], 'leader': 'FFFF', 'type': 'vote_rpc'}
                                                        	self.sock.send(json.dumps(response))
                                                        # reset our last received rpc time
                                                        	self.last_received_rpc = time.time()
                                                        	self.voted_for[msg['term']] = msg['src']
								self.leader_id = None
					elif self.state == 'leader':
						if msg['term'] > self.term:
							# revert to follower and update term
							print "{0} Leader reverting to follower {1} b/c request vote term higher than own".format(self.id, msg['src'])
							#self.state = 'follower'
							self.term = msg['term']
						# reset the active replicas
						if self.active_replica_ids[msg['src']] >= 10:
							for id in self.active_replica_ids.keys():
								self.active_replica_ids[id] = 0
					

				# received a vote rpc
				elif msg['type'] == 'vote_rpc' and self.state == 'candidate':
					print "{0} received a vote".format(self.id)
					self.election_votes += 1
					# become leader if we receive majority of votes
					if self.election_votes >= len(self.replica_ids) // 2 + 1:
						print "{0} became leader".format(self.id)
						self.state = 'leader'
						self.leader_id = self.id
						self.election_votes = 1
						# initialize our replicas' prev_log_index
						self.set_replica_indexes()
						# process our buffered packets
						self.process_buffered_packets()
						# clear out buffered packets
						self.buffered_packets = []
						# reset our transaction timeout and votes
						self.transaction_timeout = {}
						self.transaction_votes = {}

				# leader received ack for transaction
				elif msg['type'] == 'ack_rpc':
					self.active_replica_ids[msg['src']] = 0
					if msg['success']:
						#print "received a success for {0}".format(msg['MID'])
						self.next_index_map[msg['src']] += 1
						if msg['MID'] in self.transaction_votes.keys():
							# increment number of votes for this key
							if msg['src']  not in self.transaction_votes[msg['MID']]:
								self.transaction_timeout[msg['MID']] = time.time()
								self.transaction_votes[msg['MID']].append(msg['src'])
							# check to see if we reached quorum
							if len(self.transaction_votes[msg['MID']]) >= len(self.replica_ids) // 2 + 1:
								# delete entry from our timeout and votes dicts
								del self.transaction_timeout[msg['MID']]
								del self.transaction_votes[msg['MID']]
								# commit our transaction
								#self.kv_store[self.transaction_log[msg['MID']][0]] = self.transaction_log[msg['MID']][1]
								# update our commit index
								new_commit_index = self.transaction_log.keys().index(msg['MID'])
								#self.message_count += 5
								#print "multicast because commit total: {0}".format(self.message_count)
								self.append_commits(new_commit_index)
								# send ok to client
								client_msg = {'src': self.id, 'dst': self.transaction_log[msg['MID']][2], 'leader': self.leader_id, 'type': 'ok', 'MID': msg['MID']}
								self.sock.send(json.dumps(client_msg))
					# if we got a fail from replica
					else:
						#print "received a fail for {0}".format(msg['MID'])
						if self.term < msg['term']:
							self.term == msg['term']
						# decrement our next index
						self.next_index_map[msg['src']] -= 1
if __name__ == '__main__':
	server = Server()
	server.receive()

#!/usr/bin/env python

import sys, socket, select, time, json, random
from random import randint
from collections import OrderedDict

class Server:
	term = 1
	state = 'follower'
	# Your ID number
	id = sys.argv[1]
	# The ID numbers of all the other replicas
	replica_ids = sys.argv[2:]
	leader_id = None
	last_received_rpc = time.time()
	# timeout length for this server (between 150 and 300 ms)
	timeout_length = randint(150, 300)
	# who we voted for, map of term to who we voted for
	voted_for = {}
	# number of votes we received
	election_votes = 1
	# as leader, last time we sent an rpc time
	last_sent_rpc = time.time()
	# timeout length as leader
	rpc_timeout_length = 100
	# our transaction log mapping MID to array [key, value, dst, term]
	transaction_log = OrderedDict()
	# our key value store of committed transactions
	kv_store = OrderedDict()
	# dict mapping MID to array of unique votes
	transaction_votes = {}
	# dict mapping MID to last sent time
	transaction_timeout = {}
	# dict mapping MID to term that it was added
	transaction_term = {}
	# the term of our latest commit
	commit_index = 0
	# current log index
	current_log_index = -1
	# current log term
	current_log_term = 1
	# map of replica id to nextindex for that replica
	next_index_map = {}
	
	sock = socket.socket(socket.AF_UNIX, socket.SOCK_SEQPACKET)
        sock.connect(id)
	
	#enter election period
	def election(self):
		print "{0} becomes a candidate".format(self.id)
		self.term += 1
		self.state = 'candidate'
		self.election_votes = 1
		msg = {'src': self.id, 'dst': 'FFFF', 'term': self.term, 'log_term': self.current_log_term, 'log_index': self.current_log_index, 'leader': 'FFFF', 'type': 'requestvote_rpc'}
		self.send_rpc(msg, False)
		self.last_received_rpc = time.time()

	# enter election if we have hit our timeout
	def check_for_timeout(self):
		clock = time.time()
		time_diff = (clock - self.last_received_rpc) * 1000
		if time_diff > self.timeout_length:
			self.election()			

	# resend rpc if we hit our timeout
	def check_for_rpc_timeout(self):
		clock = time.time()
		if (clock - self.last_sent_rpc) * 1000 > self.rpc_timeout_length:
			msg = {'src': self.id, 'dst': 'FFFF', 'leader': self.id, 'type': 'leader_rpc', 'term': self.term, 'blank': True}
			self.send_rpc(msg, False)
			self.last_sent_rpc = time.time()

	# resend appenentries_rpc if any transaction has timed out
	def check_for_transaction_timeout(self):
		clock = time.time()
		for k in self.transaction_timeout.keys():
			# resend appendentries rpc if we hit timeout. Reset time in our transaction_timeout dict
			if (clock - self.transaction_timeout[k]) * 1000 > self.rpc_timeout_length:
				#print "resent transaction msg"
				msg = {'src': self.id, 'dst': 'FFFF', 'leader': self.leader_id, 'term': self.term, 'type': 'leader_rpc', 'key': self.transaction_log[k][0], 'value': self.transaction_log[k][1], 'blank': False, 'commit': False, 'MID': k, 'leader_commit': self.commit_index, 'recipient': self.transaction_log[k][2]}
				self.send_rpc(msg, True)
				self.transaction_timeout[k] = time.time()

	# set all of the indexes for our replicas in our next_index_map
	def set_replica_indexes(self):
		self.next_index_map = {}
		for id in self.replica_ids:
			self.next_index_map[id] = len(self.transaction_log.keys()) - 1

	# send rpc to all of our replicas
	def send_rpc(self, msg, append_entry):
		# reset our last sent rpc time
		self.last_sent_rpc = time.time()
		for id in self.replica_ids:
			# if this is an append_entry, then make sure we find the proper index and term
			if append_entry:
				prev_log_index = self.next_index_map[id]
				#print prev_log_index
				msg['prev_log_index'] = prev_log_index
				key_at_index = self.transaction_log.keys()[prev_log_index]
				msg['prev_log_term'] = self.transaction_log[key_at_index][3]
			msg['dst'] = id
			self.sock.send(json.dumps(msg))

	# commit all transactions up to index
	def append_commits(self, commit_index):
		# if incoming commit index is greater than ours, then append commits up to index
		if commit_index > self.commit_index:
			while self.commit_index < commit_index:
				self.commit_index += 1
				key_at_index = self.transaction_log.keys()[self.commit_index]
				# append entry to our kv_store
				self.kv_store[self.transaction_log[key_at_index][0]] = self.transaction_log[key_at_index][1]	
	
	def receive(self):
		while True:
			if self.state == 'leader':
				self.check_for_rpc_timeout()
				self.check_for_transaction_timeout()
			else:
				self.check_for_timeout()
			ready = select.select([self.sock], [], [], 0.01)[0]
	
			if self.sock in ready:
				msg_raw = self.sock.recv(32768)
		
				if len(msg_raw) == 0: continue
				msg = json.loads(msg_raw)
		
				# If we receive get or put, make sure the dst is our id
				if msg['type'] in ['get', 'put'] and msg['dst'] == self.id:
					# if I am follower, want to redirect message
					if self.state == 'follower':		
						# check to make sure we know who the leader is
						if self.leader_id:
							msg = {'src': self.id, 'dst': msg['src'], 'leader': self.leader_id, 'type': 'redirect', 'MID': msg['MID']}
							self.sock.send(json.dumps(msg))
						else:
							msg = {'src': self.id, 'dst': msg['src'], 'leader': 'FFFF', 'type': 'redirect', 'MID': msg['MID']}
                                                        self.sock.send(json.dumps(msg))
					# If i am a leader, commit transaction and send rpc to followers
					elif self.state == 'leader':
						# If msg is a get, return value to client
						if msg['type'] == 'get':
							# if requested key is in our key value store, return the value
							if msg['key'] in self.kv_store.keys():
								msg = {'src': self.id, 'dst': msg['src'], 'leader': self.leader_id, 'type': 'ok', 'MID': msg['MID'], 'value': self.kv_store[msg['key']]}
								self.sock.send(json.dumps(msg))
							# send blank message if key ws never put in our key value store
							else:
								print "get request not in our kv store for key {0}".format(msg['key'])
								msg = {'src': self.id, 'dst': msg['src'], 'leader': self.leader_id, 'type': 'ok', 'MID': msg['MID'], 'value': ''}
                                                                self.sock.send(json.dumps(msg))
						# if msg is a put, enter entry into our transaction log and send rpc appendentries to replicas
						elif msg['type'] == 'put':
							response = {'src': self.id, 'dst': 'FFFF', 'leader': self.leader_id, 'term': self.term, 'type': 'leader_rpc', 'key': msg['key'], 'value': msg['value'], 'blank': False, 'prev_log_index': self.current_log_index, 'prev_log_term': self.current_log_term, 'leader_commit': self.commit_index, 'MID': msg['MID'], 'recipient': msg['src']}
							self.transaction_log[msg['MID']] = [msg['key'], msg['value'], msg['src'], self.term]
							self.transaction_votes[msg['MID']] = [self.id]
							self.transaction_timeout[msg['MID']] = time.time()
							self.send_rpc(response, True)
							self.current_log_index += 1
							self.current_log_term = self.term
							#print "sent put leader rpc {0}".format(response)
	
				# Handle noop messages. This may be removed from your final implementation
				elif msg['type'] == 'leader_rpc':
					# reset our last received rpc time
					self.last_received_rpc = time.time()
					# revert to follower if we are candidate and we receive a leader rpc (leader comes back up)
                                        # make sure leader rpc we receive is at least our term
                                        if self.state == 'candidate' and msg['term'] >= self.term:
                                                print "{0} candidate reverted to follower".format(self.id)
                                                self.state = 'follower'
                                                self.election_votes = 1
						self.leader_id = msg['leader']
						self.term = msg['term']
					elif self.state == 'follower' and self.leader_id != msg['leader'] and self.term <= msg['term']:
						self.leader_id = msg['leader']
						self.term = msg['term']
						print "{0} set leader_id to {1}".format(self.id, self.leader_id)
					# set term to leader's term if ours is lower
					elif self.state == 'leader' and self.term < msg['term']:
						self.term = msg['term']
						print "{0} reverted back to follower from leader".format(self.id)
						self.state = 'follower'
						self.election_votes = 1
						self.leader_id = msg['leader']
					# if we receive appendentries rpc, add to our transaction log and send confirmation to leader
					if self.state == 'follower' and not msg['blank']:
						# reply false if leader term is less than our term
						if msg['term'] < self.term:
							print "sent fail message 1"
							response =  {'src': self.id, 'dst': self.leader_id, 'term': self.term, 'leader': self.leader_id, 'type': 'ack_rpc', 'key': msg['key'], 'value': msg['value'], 'MID': msg['MID'], 'success': False}
							self.sock.send(json.dumps(response))
						# accept blindly if our transaction log is empty
						elif len(self.transaction_log.keys()) == 0:
							print "hit initial block {0}".format(msg)
							response =  {'src': self.id, 'dst': self.leader_id, 'term': self.term, 'leader': self.leader_id, 'type': 'ack_rpc', 'key': msg['key'], 'value': msg['value'], 'MID': msg['MID'], 'success': True}
                                                        self.transaction_log[msg['MID']] = [msg['key'], msg['value'], msg['recipient'], self.term]
                                                        self.current_log_index += 1
                                                        self.current_log_term = self.term
							self.sock.send(json.dumps(response))
							
							
						# reply false if our log doesnt contain same entry or term
						#TODO this is dumb
						elif msg['prev_log_index'] <= len(self.transaction_log.keys()) - 1:
							#if self.transaction_log.keys().index(msg['MID']) != msg['prev_log_index']:
							#	print "sent fail message 2"
							#	response =  {'src': self.id, 'dst': self.leader_id, 'term': self.term, 'leader': self.leader_id, 'type': 'ack_rpc', 'key': msg['key'], 'value': msg['value'], 'MID': msg['MID'], 'success': False}
							key_at_index = self.transaction_log.keys()[msg['prev_log_index']]
							if self.transaction_log[key_at_index][3] != msg['prev_log_term']:
								print "sent fail message 3"
								self.current_log_index -= 1
								self.current_log_term = self.transaction_log[self.current_log_index][3]
								del self.transaction_log[msg['MID']]
								response =  {'src': self.id, 'dst': self.leader_id, 'term': self.term, 'leader': self.leader_id, 'type': 'ack_rpc', 'key': msg['key'], 'value': msg['value'], 'MID': msg['MID'], 'success': False}
                                                        else:
								
								#print "sent success for {0}".format(msg['prev_log_index'])
								response =  {'src': self.id, 'dst': self.leader_id, 'term': self.term, 'leader': self.leader_id, 'type': 'ack_rpc', 'key': msg['key'], 'value': msg['value'], 'MID': msg['MID'], 'success': True}
								self.transaction_log[msg['MID']] = [msg['key'], msg['value'], msg['recipient'], self.term]
								#print "after insert, transaction log length is now {0}".format(len(self.transaction_log.keys()))
								self.current_log_index += 1
								self.current_log_term = self.term

							self.sock.send(json.dumps(response))
						else:
							print "sent fail message 5 msg: {0}".format(msg)
							print "prev log index at {0} with our transaction log -1 at {1}".format(msg['prev_log_index'], len(self.transaction_log.keys()) - 1) 
							response =  {'src': self.id, 'dst': self.leader_id, 'term': self.term, 'leader': self.leader_id, 'type': 'ack_rpc', 'key': msg['key'], 'value': msg['value'], 'MID': msg['MID'], 'success': False}
							self.sock.send(json.dumps(response))
						new_commit_index = min(msg['leader_commit'], msg['prev_log_index'])			
						self.append_commits(new_commit_index)		


				# received a request for a vote rpc
				elif msg['type'] == 'requestvote_rpc' and self.state == 'follower':
					print "{0} received a vote request".format(self.id)
					# make sure we are a follower and we haven't yet voted in this term
					if msg['term'] not in self.voted_for.keys():
						# if our commit term is lower, then vote
						if self.current_log_term < msg['log_term']:
							print "{0} voted for {1}".format(self.id, msg['src'])
							response = {'src': self.id, 'dst': msg['src'], 'leader': 'FFFF', 'type': 'vote_rpc'}
							self.sock.send(json.dumps(response))
							# reset our last received rpc time
							self.last_received_rpc = time.time()
							self.voted_for[msg['term']]  = msg['src']
						# if commit terms same, compare log index
						elif self.current_log_term == msg['log_term'] and self.current_log_index <= msg['log_index']:
							print "{0} voted for {1}".format(self.id, msg['src'])
							response = {'src': self.id, 'dst': msg['src'], 'leader': 'FFFF', 'type': 'vote_rpc'}
                                                        self.sock.send(json.dumps(response))
                                                        # reset our last received rpc time
                                                        self.last_received_rpc = time.time()
                                                        self.voted_for[msg['term']] = msg['src']
							
				# received a vote rpc
				elif msg['type'] == 'vote_rpc' and self.state == 'candidate':
					#print "{0} received a vote".format(self.id)
					self.election_votes += 1
					# become leader if we receive majority of votes
					if self.election_votes >= len(self.replica_ids) // 2 + 1:
						print "{0} became leader".format(self.id)
						self.state = 'leader'
						self.leader_id = self.id
						self.election_votes = 1
						self.set_replica_indexes()
						

				# leader received ack for transaction
				elif msg['type'] == 'ack_rpc':
					if msg['success']:
						#print "received a success for {0}".format(msg['MID'])
						self.next_index_map[msg['src']] +=1
						if msg['MID'] in self.transaction_votes.keys():
							# increment number of votes for this key
							if msg['src']  not in self.transaction_votes[msg['MID']]:
								self.transaction_votes[msg['MID']].append(self.id)
							# check to see if we reached quorum
							if len(self.transaction_votes[msg['MID']]) >= len(self.replica_ids) // 2 + 1:
								# delete entry from our timeout and votes dicts
								del self.transaction_timeout[msg['MID']]
								del self.transaction_votes[msg['MID']]
								# commit our transaction
								self.kv_store[msg['key']] = msg['value']
								# update our commit index
								self.commit_index += 1
								# send ok to client
								client_msg = {'src': self.id, 'dst': self.transaction_log[msg['MID']][2], 'leader': self.leader_id, 'type': 'ok', 'MID': msg['MID']}
								self.sock.send(json.dumps(client_msg))
					# if we got a fail from replica
					else:
						print "received a fail for {0}".format(msg['MID'])
						if self.term < msg['term']:
							self.term == msg['term']
						# decrement our next index
						self.next_index_map[msg['src']] -= 1
if __name__ == '__main__':
	server = Server()
	server.receive()
